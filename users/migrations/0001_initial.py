# Generated by Django 3.2 on 2022-06-27 17:58

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import djongo.models.fields
import users.models.Address
import users.models.Audits
import users.models.Users
from users.models.Users import UseremailValidator,CustomUserManager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('entity_name', models.TextField(blank=True, default='default_base_entity', max_length=200)),
                ('entity_status', models.CharField(choices=[('NA', 'NOT AVAILABLE'), ('AV', 'AVAILABLE')], default='AV', max_length=2)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. 250 characters or fewer. Letters, digits and /_ only.', max_length=250, unique=True, validators=[UseremailValidator()], verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('auth_providers', models.CharField(default='email', max_length=255)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', djongo.models.fields.ArrayField(model_container=users.models.Address.AddressModel)),
                ('audits_data', djongo.models.fields.EmbeddedField(model_container=users.models.Audits.AuditModel)),
            ],
            options={
                'db_table': 'Authors',
                'abstract': False,
            },
            managers=[
                ('objects', CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlacklistedToken',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=100)),
                ('blacklisted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'BlacklistedToken',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutstandingToken',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=200)),
                ('jti', models.CharField(max_length=255, unique=True)),
                ('token', models.TextField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'OutstandingToken',
                'ordering': ('created_at',),
                'abstract': False,
            },
        ),
    ]
